{"version":3,"sources":["../../server/controllers/users.js"],"names":["Users","model","module","exports","createUser","req","res","validateInput","data","errors","isEmpty","email","password","cnfPassword","Institution","userFirstName","userLastName","title","isValid","body","console","log","status","json"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AACA,IAAIA,QAAQ,mBAASC,KAAT,CAAe,OAAf,CAAZ;;AAQAC,OAAOC,OAAP,GAAiB;;AAEbC,gBAAY,oBAASC,GAAT,EAAcC,GAAd,EAAmB;AAC3B,iBAAUC,aAAV,CAAwBC,IAAxB,EAA8B;AAC9B,gBAAIC,SAAS,EAAb;;AAEA,gBAAI,oBAAUC,OAAV,CAAkBF,KAAKG,KAAvB,CAAJ,EAAmC;AAC/BF,uBAAOE,KAAP,GAAe,0CAAf;AAEH;AACD,gBAAI,oBAAUD,OAAV,CAAkBF,KAAKI,QAAvB,CAAJ,EAAsC;AAClCH,uBAAOG,QAAP,GAAkB,gBAAlB;AACH;AACD,gBAAI,oBAAUF,OAAV,CAAkBF,KAAKK,WAAvB,CAAJ,EAAyC;AACrCJ,uBAAOI,WAAP,GAAqB,gBAArB;AACH;AACD,gBAAI,oBAAUH,OAAV,CAAkBF,KAAKM,WAAvB,CAAJ,EAAyC;AACrCL,uBAAOK,WAAP,GAAqB,gBAArB;AACH;AACD,gBAAI,oBAAUJ,OAAV,CAAkBF,KAAKO,aAAvB,CAAJ,EAA2C;AACvCN,uBAAOM,aAAP,GAAuB,gBAAvB;AACH;AACD,gBAAI,oBAAUL,OAAV,CAAkBF,KAAKQ,YAAvB,CAAJ,EAA0C;AACtCP,uBAAOO,YAAP,GAAsB,gBAAtB;AACH;AACD,gBAAI,oBAAUN,OAAV,CAAkBF,KAAKS,KAAvB,CAAJ,EAAmC;AAC/BR,uBAAOQ,KAAP,GAAe,gBAAf;AACH;AACD,mBAAO;AACHR,8BADG;AAEHS,yBAAS,iBAAOR,OAAP,CAAeD,MAAf;AAFN,aAAP;AAIH;;AA9B8B,6BAiCCF,cAAcF,IAAIc,IAAlB,CAjCD;;AAAA,cAiCnBV,MAjCmB,kBAiCnBA,MAjCmB;AAAA,cAiCXS,OAjCW,kBAiCXA,OAjCW;;;AAmC3B,YAAG,CAACA,OAAJ,EAAa;;AAETE,oBAAQC,GAAR,CAAYZ,MAAZ;AACAW,oBAAQC,GAAR,CAAY,gBAAZ;AACAf,gBAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBd,MAArB;AACA;AACH,SAND,MAOI;AACAW,oBAAQC,GAAR,CAAY,QAAZ;AACH;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AApEgB,CAAjB","file":"users.js","sourcesContent":["import mongoose from 'mongoose';\nimport validator from 'validator';\nimport lodash from 'lodash';\nvar Users = mongoose.model('Users');\n\n\n\n\n\n\n\nmodule.exports = {\n\n    createUser: function(req, res) {\n        function  validateInput(data) {\n        let errors = {};\n\n        if (validator.isEmpty(data.email)) {\n            errors.email = \"Required Field Format eg.(id@domain.com)\";\n           \n        }\n        if (validator.isEmpty(data.password)) {\n            errors.password = \"Required Field\";\n        }\n        if (validator.isEmpty(data.cnfPassword)) {\n            errors.cnfPassword = \"Required Field\";\n        }\n        if (validator.isEmpty(data.Institution)) {\n            errors.Institution = \"Required Field\";\n        }\n        if (validator.isEmpty(data.userFirstName)) {\n            errors.userFirstName = \"Required Field\";\n        }\n        if (validator.isEmpty(data.userLastName)) {\n            errors.userLastName = \"Required Field\";\n        }\n        if (validator.isEmpty(data.title)) {\n            errors.title = \"Required Field\";\n        }\n        return {\n            errors,\n            isValid: lodash.isEmpty(errors)\n        }\n    }\n\n\n        const { errors, isValid } = validateInput(req.body);\n\n        if(!isValid) {\n            \n            console.log(errors);\n            console.log(\"hiIs this it? \")\n            res.status(400).json(errors);\n            // res.status(400).send(errors);\n        }\n        else{\n            console.log(\"redOne\")\n        }\n\n    //     console.log(req.body.email);\n    //     Users.findOne({email: req.body.email}).exec(function(err, foundUser){\n    //     if (foundUser){\n    //         console.log(foundUser+\"!!!!!!\");\n\n    //     }else{\n    //         console.log(req.body.email+\"***\");\n    //         console.log(req.body.email+\"$$$$\");\n    //     var newUser = new Users(req.body);\n    //     newUser.save(function(err, savedUser){\n    //         if(err){\n    //             console.log(\"something went wrong\");\n    //             res.json(err);\n    //         }else{\n    //             console.log(\"created user\");\n    //             res.json(savedUser);\n    //         }\n    //     });\n    //     }\n    // });\n}\n    \n}\n"]}